class LinuxTweakMonitor(QWidget):
    def __init__(self, tray_icon):
        super().__init__()
        self.tray_icon = tray_icon
        self.setWindowTitle("LinuxTweak Service Monitor")
        self.setGeometry(100, 100, 350, 300)
        self.layout = QVBoxLayout()

        # My service list
        self.service_list = QListWidget()
        self.layout.addWidget(self.service_list)

        # Buttons
        self.start_button = QPushButton("Start Service")
        self.stop_button = QPushButton("Stop Service")
        self.restart_button = QPushButton("Restart Service")
        self.layout.addWidget(self.start_button)
        self.layout.addWidget(self.stop_button)
        self.layout.addWidget(self.restart_button)

        # Button actions
        self.start_button.clicked.connect(lambda: self.manage_service("start"))
        self.stop_button.clicked.connect(lambda: self.manage_service("stop"))
        self.restart_button.clicked.connect(lambda: self.manage_service("restart"))

        self.setLayout(self.layout)
        self.refresh_status()

    def refresh_status(self):
        """Update service status in my list box"""
        self.service_list.clear()

        # Put my service list into an array
        service_statuses = []
        for service in services:
            icon, status = check_service_status(service)
            service_statuses.append((service, icon, status))

        # Sort my services by name first > then by status: Active -> Inactive -> Disabled
        service_statuses.sort(key=lambda x: ("Active" not in x[2], "Disabled" in x[2]))

        # Add my sorted services to the list box
        for service, icon, status in service_statuses:
            self.service_list.addItem(f"{icon}{status} :  {service}")

        self.tray_icon.update_status()

    def manage_service(self, action):
        """Start/Stop/Restart my service"""
        selected_item = self.service_list.currentItem()
        if not selected_item:
            QMessageBox.warning(self, "No Service Selected", "Please select a service.")
            return

        service_name = selected_item.text().split(":")[-1].strip()

        subprocess.run(["systemctl", "daemon-reload"], check=True, capture_output=True)
        subprocess.run(["systemctl", action, service_name], capture_output=True)
        subprocess.run(
            ["systemctl", "is-enabled", service_name], check=True, capture_output=True
        )

        self.refresh_status()
        QTimer.singleShot(100, self.tray_icon.update_status)
